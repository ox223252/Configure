# Made by 0x223252
# All right reserved
#!/bin/bash

INSTALL=

MAX_X=$(tput cols)
MAX_Y=$(tput lines)

WIDTH=60
HEIGH=20
LINES=12

[ "$EDITOR" == "" ] && [ -f /bin/nano ] && EDITOR="nano"
[ "$EDITOR" == "" ] && [ -f /usr/bin/vi ] && EDITOR="vi"

#verification de la presence des paquet necessaires et proposition d'installation
PACKETS=" gcc g++ xutils-dev dialog" 
for TMP in $PACKETS
do
	dpkg -s $TMP 2> .log 1> /dev/null
	if [ "$(cat .log)" != "" ]; then
		printf "\e[32m$TMP\e[0m is missing, you need it to continue.\n"
		echo "would you want to install it ? (Y/n)"
		read REP
		if [ "$REP" != "n" ] && [ "$REP" != "N" ]; then
			INSTALL+=" $TMP"
		fi
	fi
	rm .log
done

if [ "$INSTALL" != "" ]; then
	sudo apt-get install -y -f $INSTALL
fi

# si un fichier nomé .config existe on le supprime et on 
# créait quoi qu'il arrive un dossier .config
tmpFile=/tmp/config_dialog

[ -f .config ] && \
	rm .config
[ ! -d .config ] && \
	mkdir .config

# navtive tools
configfile='.config/config_tools_natif.mk'	
[ ! -f "$configfile" ] && \
	echo "CC=gcc" > $configfile && \
	echo "CXX=g++" >> $configfile

configfile='.config/config_tools_natif_lib.mk'	
[ ! -f "$configfile" ] && \
	echo "LIB=" > $configfile

# cross tools
configfile='.config/config_tools_cross.mk'
[ ! -f "$configfile" ] && \
	echo "LABEL=arm" > $configfile && \
	echo "CROSS_CC=arm-linux-gnueabi-gcc" >> $configfile && \
	echo "CROSS_CXX=arm-linux-gnueabi-g++" >> $configfile

configfile='.config/config_tools_cross_lib.mk'	
[ ! -f "$configfile" ]&& echo "CROSS_LIB=" > $configfile


# native / cross compile flag
configfile='.config/config_tools_flags.mk'	
[ ! -f "$configfile" ] && \
	echo "PTHREAD=off" > $configfile && \
	echo "SDL1=off" >> $configfile && \
	echo "SDL2=off" >> $configfile && \
	echo "LDLL=off" >> $configfile && \
	echo "REALTIME=off" >> $configfile && \
	echo "MATH=off" >> $configfile && \
	echo "SSL=off" >> $configfile && \
	echo "CARES=off" >> $configfile && \
	echo "CRYPTO=off" >> $configfile


# hardware hard_arch (natif/cross)
configfile='.config/config_options_hard_arch.mk'	
[ ! -f "$configfile" ] && \
	echo "HARD_ARCH=natif" > $configfile

configfile='.config/config_options_warning.mk'	
[ ! -f "$configfile" ] && \
	echo "WARNING=std" > $configfile

configfile='.config/config_options_linkage.mk'	
[ ! -f "$configfile" ] && \
	echo "LINKAGE=dynamique" > $configfile
	
configfile='.config/config_options_optimisation.mk'	
[ ! -f "$configfile" ] && \
	echo "OPTIMISATION=std" > $configfile

configfile='.config/config_options_outType.mk'
[ ! -f "$configfile" ] && \
	echo "OUT_DLL=off" > $configfile

configfile='.config/config_options_debug.mk'	
[ ! -f "$configfile" ] && \
	echo "GDB=off" > $configfile && \
	echo "GPROF=off" >> $configfile && \
	echo "FULL_CPP=off" >> $configfile

# work dir
configfile='.config/config_path.mk'	
[ ! -f "$configfile" ] && \
	echo "ROOT_DIR=bin" > $configfile && \
	echo "EXEC=exec" >> $configfile && \
	echo "OUTFOLDER=out" >> $configfile && \
	echo "SOURCE_DIR=src" >> $configfile && \
	echo "DOC_DIR=doc" >> $configfile && \
	echo "PATCH_DIR=patch" >> $configfile

# compile mode
configfile='.config/config_mode.mk'	
[ ! -f "$configfile" ] && \
	echo "MODE=debug" > $configfile

# patch save
configfile='.config/config_options_patch.mk'	
[ ! -f "$configfile" ] && \
	echo "PATCH=" > $configfile

configfile='.config.mk'	
if [ ! -f "$configfile" ]; then 
	echo "include .config/config_tools_natif.mk" > $configfile
	echo "include .config/config_tools_natif_lib.mk" >> $configfile
	echo "include .config/config_tools_cross.mk" >> $configfile
	echo "include .config/config_tools_cross_lib.mk" >> $configfile
	echo "include .config/config_tools_flags.mk" >> $configfile

	echo "include .config/config_options_hard_arch.mk" >> $configfile
	echo "include .config/config_options_warning.mk" >> $configfile
	echo "include .config/config_options_optimisation.mk" >> $configfile
	echo "include .config/config_options_linkage.mk">>$configfile
	echo "include .config/config_options_debug.mk" >> $configfile
	echo "include .config/config_options_outType.mk" >> $configfile

	echo "include .config/config_path.mk" >> $configfile

	echo "include .config/config_mode.mk">> $configfile
fi

# création du makefile
printMake () {
printf "# Made by 0x223252
# All rigth reserved

include .config.mk

ROOT_DIR=.
SOURCE_DIR=\"src\"
OUTFOLDER=\"bin\"
EXEC=\"exec\"

FLAGS+= -D'BY_LINUX_MAKEFILE'
LDFLAGS+=\$(LIB)

LAST_HARD_ARCH=null
LAST_MODE=null
LAST_WARNING=null
LAST_GPROF=null
LAST_GDB=null
LAST_LINKAGE=null

LAST_HARD_ARCH=\$(shell [ -f \".last_config\" ] && cat .last_config | grep HARD_ARCH  | cut -d '=' -f2)
LAST_MODE=\$(shell      [ -f \".last_config\" ] && cat .last_config | grep MODE       | cut -d '=' -f2)
LAST_WARNING=\$(shell   [ -f \".last_config\" ] && cat .last_config | grep WARNING    | cut -d '=' -f2)
LAST_GPROF=\$(shell     [ -f \".last_config\" ] && cat .last_config | grep GPROF      | cut -d '=' -f2)
LAST_GDB=\$(shell       [ -f \".last_config\" ] && cat .last_config | grep GDB        | cut -d '=' -f2)
LAST_LINKAGE=\$(shell   [ -f \".last_config\" ] && cat .last_config | grep LINKAGE    | cut -d '=' -f2)
LAST_OUT_DLL=\$(shell   [ -f \".last_config\" ] && cat .last_config | grep OUT_DLL    | cut -d '=' -f2)

EQ_HARD_ARCH=\$(shell [ -f \".last_config\" ] && [ \"\$(HARD_ARCH)\" = \"\$(LAST_HARD_ARCH)\" ] && echo true)
EQ_MODE=\$(shell      [ -f \".last_config\" ] && [      \"\$(MODE)\" = \"\$(LAST_MODE)\"      ] && echo true)
EQ_WARNING=\$(shell   [ -f \".last_config\" ] && [   \"\$(WARNING)\" = \"\$(LAST_WARNING)\"   ] && echo true)
EQ_GPROF=\$(shell     [ -f \".last_config\" ] && [     \"\$(GPROF)\" = \"\$(LAST_GPROF)\"     ] && echo true)
EQ_GDB=\$(shell       [ -f \".last_config\" ] && [       \"\$(GDB)\" = \"\$(LAST_GDB)\"       ] && echo true)
EQ_LINKAGE=\$(shell   [ -f \".last_config\" ] && [   \"\$(LINKAGE)\" = \"\$(LAST_LINKAGE)\"   ] && echo true)
EQ_OUT_DLL=\$(shell   [ -f \".last_config\" ] && [   \"\$(OUT_DLL)\" = \"\$(LAST_OUT_DLL)\"   ] && echo true)

ifneq (\$(EQ_HARD_ARCH),true)
	DEPEND=mrproper
endif

ifneq (\$(EQ_MODE),true)
	DEPEND=mrproper
endif

ifneq (\$(EQ_WARNING),true)
	DEPEND=mrproper
endif
		
ifneq (\$(EQ_GPROF),true)
	DEPEND=mrproper
endif

ifneq (\$(EQ_GDB),true)
	DEPEND=mrproper
endif

ifneq (\$(EQ_LINKAGE),true)
	DEPEND=mrproper
endif

ifneq (\$(EQ_OUT_DLL),true)
	DEPEND=mrproper
endif

ifneq (\$(HARD_ARCH),natif)
	CXX=\$(CROSS_CXX)
	CC=\$(CROSS_CC)
endif

ifeq (\$(MODE),release)	
	FLAGS+= -D'MODE_RELEASE'
else	
	FLAGS+= -D'MODE_DEBUG'
endif

ifeq (\$(LINKAGE),static)
	LDFLAGS+= -static
endif

ifeq (\$(WARNING),all)
	FLAGS+= -Wall -Wshadow -Wextra -fexceptions
else ifeq (\$(WARNING), none)
	FLAGS+= -w
endif

ifeq (\$(LDLL),on)
	LDFLAGS+= -ldl
endif

ifeq (\$(OUT_DLL),on)
	LDFLAGS+= -shared
endif

ifeq (\$(PTHREAD),on)
	LDFLAGS+= -lpthread
endif

ifeq (\$(SDL1),on)
	LDFLAGS+= -lSDL
endif

ifeq (\$(SDL2),on)
	LDFLAGS+= -lSDL2
endif

ifeq (\$(REALTIME),on)
	LDFLAGS+= -lrt
endif

ifeq (\$(MATH),on)
	LDFLAGS+= -lm
endif

ifeq (\$(SSL),on)
	LDFLAGS+= -lssl
endif

ifeq (\$(CARES),on)
	LDFLAGS+= -lcares
endif

ifeq (\$(CRYPTO),on)
	LDFLAGS+= -lcrypto
endif

ifeq (\$(GPROF),on)
	FLAGS+= -pg
	LDFLAGS+= -pg
endif

ifeq (\$(GDB),on)
	FLAGS+= -g
	LDFLAGS+= -g
endif

ifeq (\$(FULL_CPP),on)
	CC=\$(CXX)
endif

CPP_SRC=\$(shell find ./\$(SOURCE_DIR) -name *.cpp)
CPP_OBJ=\$(CPP_SRC:.cpp=.o)

C_SRC=\$(shell find ./\$(SOURCE_DIR) -name *.c)
C_OBJ=\$(C_SRC:.c=.o)

OBJ=\$(C_OBJ) \$(CPP_OBJ)

all: testVar \$(ROOT_DIR) cible \$(DEPEND) makedeps \$(ROOT_DIR)/\$(EXEC) .config \$(ROOT_DIR)/\$(OUTFOLDER)
	@echo \"+=======================================+\"
	@echo \"|	\\\\033[1;92mBuid done\\\\033[0m\\t\\t\\t|\"
	@echo \"| for hard_arch : \\\\033[1;92m\$(shell file \$(ROOT_DIR)/\$(EXEC) | cut -d ',' -f2)\\\\033[0m   \\t\\t|\"
	@echo \"| in : \\\\033[1;92m\$(MODE)\\\\033[0m mode \t\t\t|\"
	@echo \"+=======================================+\"

testVar:
	@echo \"assert input var, do not remove this else it should be \\\\033[1;31mdangerous\\\\033[0m\"
ifeq (\$(ROOT_DIR),/)
	@echo \"\\\\033[1;91mVar test ROOT_DIR not valides\\\\033[0m\"
	@exit 1
endif
ifeq (\$(ROOT_DIR),)
	@echo \"\\\\033[1;91mVar test ROOT_DIR not valides\\\\033[0m\"
	@exit 1
endif
ifeq (\$(SOURCE_DIR),)
	@echo \"\\\\033[1;91mVar test SOURCE_DIR not valides\\\\033[0m\"
	@exit 1
endif
ifeq (\$(EXEC),)
	@echo \"\\\\033[1;91mVar test EXEC not valides\\\\033[0m\"
	@exit 1
endif
ifeq (\$(OUTFOLDER),)
	@echo \"\\\\033[1;91mVar test OUTFOLDER not valides\\\\033[0m\"
	@exit 1
endif
	@echo \"\\\\033[1;92mVar tests valides, continue\\\\033[0m\"

\$(ROOT_DIR):
	@\$(shell [ -d \"\$(ROOT_DIR)\" ] || mkdir -p \"\$(ROOT_DIR)\" )

\$(ROOT_DIR)/\$(OUTFOLDER): \$(ROOT_DIR)
	@\$(shell [ ! -d \"\$(ROOT_DIR)/\$(OUTFOLDER)\" ] && mkdir -p \"\$(ROOT_DIR)/\$(OUTFOLDER)\" )

cible:
	@echo  > .last_config
	@echo \"HARD_ARCH=\$(HARD_ARCH)\" >> .last_config
	@echo \"TARGET=\$(TARGET)\" >> .last_config
	@echo \"MODE=\$(MODE)\" >> .last_config
	@echo \"WARNING=\$(WARNING)\" >> .last_config
	@echo \"GPROF=\$(GPROF)\" >> .last_config
	@echo \"GDB=\$(GDB)\" >> .last_config
	@echo \"LINKAGE=\$(LINKAGE)\" >> .last_config
	@echo \"OUT_DLL=\$(OUT_DLL)\" >> .last_config
	
docs:
	@doxywizard doc/Doxyfile

\$(ROOT_DIR)/\$(EXEC): \$(OBJ)
	\$(CXX) -o \$@ \$^ \$(LDFLAGS)

%%.o: %%.c
	\$(CC) -c -o \$@ \$< \$(FLAGS)
%%.o: %%.cpp
	\$(CXX) -c -o \$@ \$< \$(FLAGS)


clean:
	rm -f \$(shell find ./\$(SOURCE_DIR)/ -name *.o) \$(shell find ./\$(SOURCE_DIR)/ -name *.so)

cleanDoc:
	rm -f -r doc/html/*
	rm -f -r doc/latex/*
	rm -f -r doc/xml/*
	rm -f -r doc/man/*
	rm -f -r doc/rtf/*

cleanDump:	
	rm -f -r \$(ROOT_DIR)/\$(OUTFOLDER)/*

mrproper: clean cleanDump cleanDoc
	rm -f \$(ROOT_DIR)/\$(EXEC)

empty: mrproper
	@echo \"#!/bin/bash\" > script.sh
	@echo \'rm -r \$\$(ls -a | grep -v -E \\\"^((configure)|(\.+)|(src)|(patch)|(res)|(.git)|(lib))\$\$\\\")\' >> script.sh
	@chmod +x script.sh
	@./script.sh

makedeps:
	@makedepend -Y \$(C_SRC) \$(CPP_SRC) 2> /dev/null

.config:
	@[ ! -f .config ] && echo > .config

printEnv:
	@echo \"LAST_HARD_ARCH=\"\$(LAST_HARD_ARCH)
	@echo \"LAST_MODE=\"\$(LAST_MODE)
	@echo \"LAST_WARNING=\"\$(LAST_WARNING)
	@echo \"LAST_GPROF=\"\$(LAST_GPROF)
	@echo \"LAST_GDB=\"\$(LAST_GDB)
	@echo \"LAST_LINKAGE=\"\$(LAST_LINKAGE)
	@echo \"HARD_ARCH=\"\$(HARD_ARCH)
	@echo \"MODE=\"\$(MODE)
	@echo \"WARNING=\"\$(WARNING)
	@echo \"GPROF=\"\$(GPROF)
	@echo \"LAST_GDB=\"\$(LAST_GDB)
	@echo \"LINKAGE=\"\$(LINKAGE)
	@echo \"EQ_HARD_ARCH=\"\$(EQ_HARD_ARCH)
	@echo \"EQ_MODE=\"\$(EQ_MODE)
	@echo \"EQ_WARNING=\"\$(EQ_WARNING)
	@echo \"EQ_GPROF=\"\$(EQ_GPROF)
	@echo \"EQ_GDB=\"\$(EQ_GDB)
	@echo \"EQ_LINKAGE=\"\$(EQ_LINKAGE)

" > makefile
}

[ ! -f makefile ] && printMake && exit

tool_natif () {
	configfile='.config/config_tools_natif.mk'	
	[ ! -f "$configfile" ] && echo "CC=gcc" > $configfile && echo "CXX=g++" >> $configfile
	items=$(awk -F\= '{print $1,$2}' $configfile)
	dialog --menu "Natif" $HEIGH $WIDTH $LINES $items 2> $tmpFile

	retval=$?
	parameter=$(cat $tmpFile)

	[ $retval -eq 0 ] && tochange=$parameter || return 1

	val=$(awk -F\= -v x=$tochange '$1==x {print $2}' $configfile)
	dialog --inputbox "Enter new value($tochange)" 0 0 $val 2> $tmpFile

	dialog --title "Confirmation"  --yesno "Commit ?" 0 0
	case $? in
		0) 	newval=$(cat $tmpFile)
			awk -v x=$tochange -v n=$newval ' BEGIN {FS=OFS="="}$1==x {$2=n} {print} ' $configfile > $configfile.tmp
			mv $configfile.tmp $configfile
			;;
		1|255) dialog --infobox "No Changes done" 0 0
			sleep 2
			;;
	esac
	dialog --textbox $configfile 0 0
}

tool_native_lib () {
	configfile='.config/config_tools_natif_lib.mk'
	[ ! -f "$configfile" ]&& echo "LIB=" > $configfile

	$EDITOR -c $configfile
	return
}

tool_cross () {
	configfile='.config/config_tools_cross.mk'
	[ ! -f "$configfile" ] && echo "LABEL=arm" > $configfile  && echo "CROSS_CC=arm-linux-gnueabi-gcc" >> $configfile && echo "CROSS_CXX=arm-linux-gnueabi-g++" >> $configfile
	items=$(awk -F\= '{print $1,$2}' $configfile)
	dialog --menu "cross" $HEIGH $WIDTH $LINES $items 2> $tmpFile	

	retval=$?
	parameter=$(cat $tmpFile)

	[ $retval -eq 0 ] && tochange=$parameter || return 1

	val=$(awk -F\= -v x=$tochange '$1==x {print $2}' $configfile)
	dialog --inputbox "Enter new value($tochange)" 0 0 $val 2> $tmpFile

	dialog --title "Confirmation"  --yesno "Commit ?" 0 0
	case $? in
		0) 	newval=$(cat $tmpFile)
			awk -v x=$tochange -v n=$newval ' BEGIN {FS=OFS="="}$1==x {$2=n} {print} ' $configfile > $configfile.tmp
			mv $configfile.tmp $configfile
			;;
		1|255) dialog --infobox "No Changes done" 0 0
			sleep 2
			;;
	esac
	dialog --textbox $configfile 0 0
}

tool_cross_lib () {
	configfile='.config/config_tools_cross_lib.mk'	
	[ ! -f "$configfile" ]&& echo "CROSS_LIB=" > $configfile
	
	$EDITOR -c $configfile
	return
}

tool_flags () {
	configfile='.config/config_tools_flags.mk'
	[ ! -f "$configfile" ] && echo "PTHREAD=off" > $configfile && echo "SDL1=off" >> $configfile && echo "SDL2=off" >> $configfile


	pthread=$(cat $configfile | grep PTHREAD | cut  -d '=' -f2)
	sdl1=$(cat $configfile | grep SDL1 | cut  -d '=' -f2)
	sld2=$(cat $configfile | grep SDL2 | cut  -d '=' -f2)
	ldll=$(cat $configfile | grep LDLL | cut  -d '=' -f2)
	rt=$(cat $configfile | grep REALTIME | cut  -d '=' -f2)
	math=$(cat $configfile | grep MATH | cut  -d '=' -f2)
	ssl=$(cat $configfile | grep SSL | cut  -d '=' -f2)
	cares=$(cat $configfile | grep CARES | cut  -d '=' -f2)
	crypto=$(cat $configfile | grep CRYPTO | cut  -d '=' -f2)

	dialog --nocancel \
		--checklist "debug option" $HEIGH $WIDTH $LINES \
		1 "pthread" $pthread \
		2 "sdl1" $sdl1 \
		3 "sld2" $sld2 \
		4 "dll" $ldll \
		5 "real time (rt)" $rt \
		6 "math" $math \
		7 "ssl" $ssl \
		8 "cares" $cares\
		9 "crypto" $crypto 2> $tmpFile

	retval=$?
	parameter=$(cat $tmpFile)

	pthread="off"
	sdl1="off"
	sdl2="off"
	ldll="off"
	rt = "off"
	math = "off"
	ssl = "off"
	cares = "off"
	crypto = "off"

	for item in $parameter
	do
		case $item in
			1) pthread="on" ;;
			2) sdl1="on" ;;
			3) sdl2="on" ;;
			4) ldll="on" ;;
			5) rt="on" ;;
			6) math="on" ;;
			7) ssl="on" ;;
			8) cares="on" ;;
			9) crypto="on" ;;
		esac
	done

	echo "PTHREAD="$pthread > $configfile
	echo "SDL1="$sdl1 >> $configfile
	echo "SDL2="$sdl2 >> $configfile
	echo "LDLL="$ldll >> $configfile
	echo "REALTIME="$rt >> $configfile
	echo "MATH="$math >> $configfile
	echo "SSL="$ssl >> $configfile
	echo "CARES="$cares >> $configfile
	echo "CRYPTO="$crypto >> $configfile
}

tools () {
	dialog --cancel-label "Back" \
		--title "SLAMer" \
		--menu "Tools chaine" $HEIGH $WIDTH $LINES \
			1 "Natif" \
			2 "Additional native libs" \
			3 "Cross tool" \
			4 "Additional cross libs " \
			5 "Additional flags" 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	case $choice in
		1) 	tool_natif
			tools
			;;
		2) 	tool_native_lib
			tools
			;;
		3) 	tool_cross
			tools
			;;
		4) 	tool_cross_lib
			tools
			;;
		5) 	tool_flags
			tools
			;;
	esac
}

options_hard_arch () {
	configfile='.config/config_options_hard_arch.mk'	
	[ ! -f "$configfile" ] && echo "HARD_ARCH=natif" > $configfile
	active=$(cat $configfile | grep HARD_ARCH | cut -d '=' -f2)
	
	labelfile='.config/config_tools_cross.mk'
	[ -f "$labelfile" ] && crossTool=$(cat $labelfile | grep LABEL | cut -d '=' -f2)
	
	cross="off"
	natif="off"
	case $active in
		natif)
			natif="on"
			;;
		*)
			cross="on"
			;;
	esac

	dialog --cancel-label "Back" \
		--radiolist "choix de la cible de compilation" $HEIGH $WIDTH $LINES \
		1 "compilé en natif" $natif\
		2 "corss compilé pour "$crossTool $cross 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	case $choice in
		1)	echo "HARD_ARCH=natif" > $configfile
			;;
		2)	echo "HARD_ARCH="$crossTool > $configfile
			;;
	esac

	if [ $cross == "on" ]; then
		configfile='.config/config_tools_cross.mk'
		CROSS_CC=$(cat $configfile | grep CROSS_CC | cut -d '=' -f2)
		CROSS_CXX=$(cat $configfile | grep CROSS_CXX | cut -d '=' -f2)

		if [ "$CROSS_CC" == "arm-linux-gnueabi-gcc" ]; then
			dpkg -s gcc-arm-linux-gnueabi 2> .log 1> /dev/null
			if [ "$(cat .log)" != "" ]; then
				echo "gcc-arm is missing, you need it to continue."
				echo "would you want to install it ? (Y/n)"
				read INSTALL_GCC_ARM
				if [ $INSTALL_GCC_ARM != "n" ] && [ $INSTALL_GCC_ARM != "N" ]; then
					INSTALL+= gcc-arm-linux-gnueabi
				fi
			fi
			rm .log
		fi

		if [ "$CROSS_CXX" == "arm-linux-gnueabi-g++" ]; then
			dpkg -s g++-arm-linux-gnueabi 2> .log 1> /dev/null
			if [ "$(cat .log)" != "" ]; then
				echo "g++-arm is missing, you need it to continue."
				echo "would you want to install it ? (Y/n)"
				read INSTALL_GCC_ARM
				if [ $INSTALL_GCC_ARM != "n" ] && [ $INSTALL_GCC_ARM != "N" ]; then
					INSTALL+= g++-arm-linux-gnueabi
				fi
			fi
			rm .log
		fi
	fi
}

options_warning () {
	configfile='.config/config_options_warning.mk'	
	[ ! -f "$configfile" ] && echo "WARNING=std" > $configfile
	active=$(cat $configfile | grep WARNING | cut -d '=' -f2)
	
	none="off"
	all="off"
	std="off"
	case $active in
		all)
			all="on"
			;;
		none)
			none="on"
			;;
		*)
			std="on"
			;;
	esac
	dialog --cancel-label "Back" \
		--radiolist "niveau de warning" $HEIGH $WIDTH $LINES \
		1 "standard" $std\
		2 "pas de warnning" $none\
		3 "tous warning activés" $all 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	case $choice in
		1)	echo "WARNING=std" > $configfile
			;;
		2)	echo "WARNING=none" > $configfile
			;;
		3)	echo "WARNING=all" > $configfile
			;;
	esac
}

options_optimisation () {
	configfile='.config/config_options_optimisation.mk'	
	[ ! -f "$configfile" ] && echo "OPTIMISATION=std" > $configfile
	active=$(cat $configfile | grep OPTIMISATION | cut -d '=' -f2)
	
	size="off"
	speed="off"
	std="off"
	case $active in
		-Os)
			size="on"
			;;
		-O2)
			speed="on"
			;;
		*)
			std="on"
			;;
	esac
	dialog --cancel-label "Back" \
		--radiolist "type d'optimisation" $HEIGH $WIDTH $LINES \
		1 "standard" $std\
		2 "poptimisé en vitesse d'execution" $speed\
		3 "optimisé en taille de sortie" $size 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	case $choice in
		1)	echo "OPTIMISATION=" > $configfile
			;;
		2)	echo "OPTIMISATION=-O2" > $configfile
			;;
		3)	echo "OPTIMISATION=-Os" > $configfile
			;;
	esac
}

options_patch () {
	configfile='.config/config_options_patch.mk'	
	[ ! -f "$configfile" ] && echo "PATCH=" > $configfile
	active=$(cat $configfile | grep PATCH | cut -d '=' -f2)
	
	incremental="off"
	differentiel="off"
	decremental="off"
	case $active in
		incremental)
			incremental="on"
			;;
		differentiel)
			differentiel="on"
			;;
		decremental)
			decremental="on"
			;;
	esac
	dialog --cancel-label "Back" \
		--radiolist "type d'optimisation" $HEIGH $WIDTH $LINES \
		1 "incremental" $incremental\
		2 "differentiel" $differentiel\
		3 "decremental" $decremental 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	case $choice in
		1)	echo "PATCH=incremental" > $configfile
			;;
		2)	echo "PATCH=differentiel" > $configfile
			;;
		3)	echo "PATCH=decremental" > $configfile
			;;
		*)	echo "PATCH=" > $configfile
			;;
	esac
}

option_linkage () {
	configfile='.config/config_options_linkage.mk'	
	[ ! -f "$configfile" ] && echo "LINKAGE=dynamique" > $configfile
	active=$(cat $configfile | grep LINKAGE | cut -d '=' -f2)
	
	static="off"
	dynamique="off"
	case $active in
		dynamique)
			dynamique="on"
			;;
		static)
			static="on"
			;;
	esac
	dialog --cancel-label "Back" \
		--radiolist "type de linkage" $HEIGH $WIDTH $LINES \
		1 "dynamique" $dynamique\
		2 "statics" $static 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	case $choice in
		1)	echo "LINKAGE=dynamique" > $configfile
			;;
		2)	echo "LINKAGE=static" > $configfile
			;;
	esac
}

options_debug () {
	configfile='.config/config_options_debug.mk'	
	[ ! -f "$configfile" ] && echo "GDB=off" > $configfile && echo "GPROF=off" >> $configfile && echo "FULL_CPP=off" >> $configfile


	gdb=$(cat $configfile | grep GDB | cut  -d '=' -f2)
	gprof=$(cat $configfile | grep GPROF | cut  -d '=' -f2)
	cpp=$(cat $configfile | grep FULL_CPP | cut  -d '=' -f2)

	dialog --nocancel \
		--checklist "debug option" $HEIGH $WIDTH $LINES \
		1 "gdb" $gdb \
		2 "gprof" $gprof \
		3 "full cpp use" $cpp 2> $tmpFile

	retval=$?
	parameter=$(cat $tmpFile)

	gdb="off"
	gprof="off"
	cpp="off"

	for item in $parameter
	do
		case $item in
			1)	gdb="on"
				;;
			2)	gprof="on"
				;;
			3)	cpp="on"
				;;
		esac
	done

	echo "GDB=$gdb" > $configfile
	echo "GPROF=$gprof" >> $configfile
	echo "FULL_CPP=$cpp" >> $configfile
}

option_outType () {
	configfile='.config/config_options_outType.mk'
	[ ! -f "$configfile" ] && echo "OUT_DLL=off" > $configfile
	active=$(cat $configfile | grep OUT_DLL | cut -d '=' -f2)

	static="off"
	dynamique="off"
	case $active in
		on)
			dynamique="on"
			;;
		off)
			static="on"
			;;
	esac
	dialog --cancel-label "Back" \
		--radiolist "type de linkage" $HEIGH $WIDTH $LINES \
		1 "dynamique" $dynamique\
		2 "statics" $static 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	case $choice in
		1)	echo "OUT_DLL=on" > $configfile
			;;
		2)	echo "OUT_DLL=off" > $configfile
			;;
	esac
}

options () { 
	hard_arch=''
	warning=''
	optimisation=''
	[ -f '.config/config_options_hard_arch.mk' ] &&  hard_arch=$(cat '.config/config_options_hard_arch.mk' | grep HARD_ARCH | cut -d '=' -f2)
	[ -f '.config/config_options_warning.mk' ] &&  warning=$(cat '.config/config_options_warning.mk' | grep WARNING | cut -d '=' -f2)
	[ -f '.config/config_options_optimisation.mk' ] &&  optimisation=$(cat '.config/config_options_optimisation.mk' | grep OPTIMISATION | cut -d '=' -f2)
	[ -f '.config/config_options_linkage.mk' ] &&  linkage=$(cat '.config/config_options_linkage.mk' | grep LINKAGE | cut -d '=' -f2)
	[ -f '.config/config_options_outType.mk' ] &&  out=$(cat '.config/config_options_outType.mk' | grep OUT_DLL | cut -d '=' -f2)

	dialog --cancel-label "Back" \
		--title "SLAMer" \
		--menu "Options de compilation" $HEIGH $WIDTH $LINES \
			1 "Hardware arch : "$hard_arch \
			2 "Warnning : "$warning \
			3 "Optimisation : "$optimisation \
			4 "Linkage : "$linkage \
			5 "Debug" \
			6 "OUT : "$out 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	case $choice in
		1) 	options_hard_arch
			options
			;;
		2) 	options_warning
			options
			;;
		3) 	options_optimisation
			options
			;;
		4)	option_linkage
			options
			;;
		5) 	options_debug
			options
			;;
		6)	option_outType
			options
			;;
	esac
}

path () {
	configfile='.config/config_path.mk'	
	[ ! -f "$configfile" ] && echo "ROOT_DIR=bin" > $configfile && echo "EXEC=exec" >> $configfile && echo "OUTFOLDER=out" >> $configfile && echo "SOURCE_DIR=src" >> $configfile && echo "DOC_DIR=doc" >> $configfile && echo "PATCH_DIR=patch" >> $configfile
	items=$(awk -F\= '{print $1,$2}' $configfile)
	dialog --menu "Path config" $HEIGH $WIDTH $LINES $items 2> $tmpFile

	retval=$?
	parameter=$(cat $tmpFile)

	[ $retval -eq 0 ] && tochange=$parameter || return 1

	val=$(awk -F\= -v x=$tochange '$1==x {print $2}' $configfile)
	dialog --inputbox "Enter new value($tochange)" 0 0 $val 2> $tmpFile

	dialog --title "Confirmation"  --yesno "Commit ?" 0 0
	case $? in
		0) 	newval=$(cat $tmpFile)
			awk -v x=$tochange -v n=$newval ' BEGIN {FS=OFS="="}$1==x {$2=n} {print} ' $configfile > $configfile.tmp
			mv $configfile.tmp $configfile
			;;
		1|255) dialog --infobox "No Changes done" 0 0
			sleep 2
			;;
	esac
	dialog --textbox $configfile 0 0
}

mode () {
	configfile='.config/config_mode.mk'	
	[ ! -f "$configfile" ] && echo "MODE=debug" > $configfile
	mode=$(cat $configfile | grep MODE | cut -d '=' -f2)

	debug="off"
	release="off"
	case $mode in
		debug)
			debug="on"
			;;
		release)
			release="on"
			;;
	esac
	dialog --cancel-label "Back" \
		--radiolist "mode de sortie" 20 61 5 \
		1 "compilé sans aucun log de debug" $release\
		2 "compilé avec les logs de debug affichable" $debug 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	case $choice in
		1)	echo "MODE=release" > $configfile
			;;
		2)	echo "MODE=debug" > $configfile
			;;
	esac
}

patch () {
	sleep 1
}

main () {	
	dialog --cancel-label "Exit" \
		--title "$1" \
		--menu "Compilation Configuration" $HEIGH $WIDTH $LINES \
			1 "Tool chaine" \
			2 "Options" \
			3 "Path" \
			4 "Mode" \
			5 "Patch" \
			6 "Compiler" 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)
	[ $retv -eq 1 -o $retv -eq 255 ] && rm $tmpFile && clear && exit


	case $choice in
		1) 	tools
			main
			;;
		2) 	options
			main
			;;
		3) 	path
			main
			;;
		4) 	mode
			main
			;;
		5) 	patch
			main
			;;
		6) 	clear
			make
			echo "press [Enter] to continue"
			read scan
			main
			;;
	esac
}

main $0
