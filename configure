#!/bin/bash
# Copyright (C) 2018 name of ox223252
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

# correct display
export NCURSES_NO_UTF8_ACS=1

DIALOG=dialog

VERSION=0.5
LICENSE=GPLv2
GITHUB_PATH=https://github.com/ox223252/Configure

INSTALL=
PRINT_AT_END=

MAX_X=$(tput cols)
MAX_Y=$(tput lines)

WIDTH=60
HEIGH=20
LINES=12

configFolder=".config"

dataLibs=("pthread" \
	"sdl.1" \
	"sdl.2" \
	"realTime" \
	"math" \
	"ssl" \
	"cares" \
	"crypto" \
	"use_DLL" \
	"create_DLL" \
	"mosquitto" \
	)
dataLibsValues=("-lpthread" \
	"-lSDL" \
	"-lSDL2" \
	"-lrt" \
	"-lm" \
	"-lssl" \
	"-lcares" \
	"-lcrypto" \
	"-ldl" \
	"-shared" \
	"-lmosquitto" \
	)
archTest=("MODE" \
	"WARNING" \
	"GPROF" \
	"GDB" \
	"LINKAGE" \
	"OUT_DLL" \
	"FLAGS" \
	)
warningType=( "std" \
	"none" \
	"all" \
	)
warningInfos=( "standard" \
	"no_warning" \
	"all_warnings" \
	)
outType=( "static" \
	"dynamic" \
	)
outInfos=( "binary" \
	"shared_lib" \
	)
debugTypes=( "GDB" \
	"GPROF" \
	"FULL_CPP" \
	)
linkageType=( "dynamic" \
	"static" \
	)
optimisationType=( "-O0" \
	"-O1" \
	"-O2" \
	"-O3" \
	)
optimisationInfo=( "none" \
	"minimal"
	"binary_size" \
	"execution_speed" \
	)
modeInfos=( "compiled_with_debug_logs" \
	"compiled_without_debug_log" \
	)
modeType=( "debug" \
	"release" \
	)
pathType=( "EXEC" \
	"ROOT_DIR" \
	"DOC_DIR" \
	"BUILD_DIR" \
	"SOURCE_DIR" \
	"PATCH_DIR" \
	"RESSOURCES_DIR" \
	"CONFIG_DIR" \
	"LIB_DIR" \
	)
pathValue=( "exec" \
	"bin" \
	"doc" \
	"build" \
	"src" \
	"patch" \
	"res" \
	"$configFolder" \
	"lib" \
	)
saveLast=4 # the lasts elements from the fourth should be save from make empty
# and the four first should be removed

compilSoft=( "arm-linux-gnueabi-gcc" \
	"arm-linux-gnueabi-g++" \
	"arm-linux-gnueabihf-gcc" \
	"arm-linux-gnueabihf-g++" \
	"i686-w64-mingw32-gcc" \
	"i686-w64-mingw32-g++" \
	)
compilPacket=( "gcc-arm-linux-gnueabi" \
	"g++-arm-linux-gnueabi" \
	"gcc-arm-linux-gnueabihf" \
	"g++-arm-linux-gnueabihf" \
	"mingw-w64" \
	"mingw-w64" \
	)

#select default editor if no one configured
[ "$EDITOR" == "" ] && [ -f /bin/nano ] && EDITOR="nano"
[ "$EDITOR" == "" ] && [ -f /usr/bin/vi ] && EDITOR="vi"

#verification de la presence des paquet necessaires et proposition d'installation
PACKETS=" gcc g++ xutils-dev dialog curl git make"
for TMP in $PACKETS
do
	dpkg -s $TMP 2> .log 1> /dev/null
	if [ "$(cat .log)" != "" ]; then
		printf "\e[32m$TMP\e[0m is missing, you need it to continue.\n"
		echo "would you want to install it ? (Y/n)"
		read REP
		if [ "$REP" != "n" ] && [ "$REP" != "N" ]; then
			INSTALL+=" $TMP"
		fi
	fi
	rm .log
done

if [ "$INSTALL" != "" ]; then
	sudo apt-get install -y -f $INSTALL
fi

# si un fichier nomé .config existe on le supprime et on
# créait quoi qu'il arrive un dossier .config
tmpFile=/tmp/config_dialog

[ -f "$configFolder" ] && \
	rm $configFolder
[ ! -d "$configFolder" ] && \
	mkdir $configFolder

# path
if [ ! -f "$configFolder/config_path.mk" ]; then
	inputLength=${#pathType[@]}

	for (( i=0; i<${inputLength}; i++ ))
	do
		echo "${pathType[$i]}=${pathValue[$i]}" >> "$configFolder/config_path.mk"
	done
fi

# cross tools
createToolsFile()
{
	echo "# flags for alls targets" > $1
	echo "FLAGS= -D'BY_LINUX_MAKEFILE'" >> $1
	echo "" >> $1
	echo "# tools / flags / libs only for native target" >> $1
	echo "CC=gcc" >> $1
	echo "CXX=g++" >> $1
	echo "natif_FLAGS=" >> $1
	echo "natif_LIBS=" >> $1
	echo "" >> $1
	echo "# tools / flags / libs only for arm linux target" >> $1
	echo "LABEL=arm-Linux" >> $1
	echo "arm-Linux_CROSS_CC=arm-linux-gnueabi-gcc" >> $1
	echo "arm-Linux_CROSS_CXX=arm-linux-gnueabi-g++" >> $1
	echo "arm-Linux_FLAGS=" >> $1
	echo "arm-Linux_LIBS=" >> $1
	echo "arm-Linux_EXEC_AFTER=" >> $1
	echo "" >> $1
	echo "# tools / flags / libs only for arm target" >> $1
	echo "LABEL=arm" >> $1
	echo "arm_CROSS_CC=arm-none-eabi-gcc" >> $1
	echo "arm_CROSS_CXX=arm-none-eabi-g++" >> $1
	echo "arm_FLAGS=-std=gnu99 -g -O2 -Wall -mlittle-endian -mthumb -mthumb-interwork -mcpu=cortex-m0 -fsingle-precision-constant -Wdouble-promotion" >> $1
	echo "arm_LIBS=" >> $1
	echo "arm_EXEC_AFTER=arm-none-eabi-objcopy -O binary \${EXEC} \${EXEC}.bin" >> $1
	echo "" >> $1
	echo "# tools / flags / libs only for w64 target" >> $1
	echo "LABEL=w64" >> $1
	echo "w64_CROSS_CC=i686-w64-mingw32-gcc" >> $1
	echo "w64_CROSS_CXX=i686-w64-mingw32-g++" >> $1
	echo "w64_FLAGS=" >> $1
	echo "w64_LIBS=" >> $1
	echo "w64_EXEC_AFTER=" >> $1
}

configfile="$configFolder/config_tools.mk"
[ ! -f "$configfile" ] && \
	createToolsFile $configfile

# hardware hard_arch (natif/cross)
configfile="$configFolder/config_options_hard_arch.mk"
[ ! -f "$configfile" ] && \
	echo "HARD_ARCH=natif" > $configfile

# work dir
configfile="$configFolder/config_path.mk"
[ ! -f "$configfile" ] && \
	echo "ROOT_DIR=bin" > $configfile && \
	echo "EXEC=exec" >> $configfile && \
	echo "SOURCE_DIR=src" >> $configfile && \
	echo "BUILD_DIR=build" >> $configfile && \
	echo "DOC_DIR=doc" >> $configfile && \
	echo "PATCH_DIR=patch" >> $configfile && \
	echo "RESSOURCES_DIR=res" >> $configfile && \
	echo "CONFIG_DIR=.config" >> $configfile && \
	echo "LIB_DIR=lib" >> $configfile

# patch save
configfile="$configFolder/config_options_patch.mk"
[ ! -f "$configfile" ] && \
	echo "PATCH=" > $configfile


# création du makefile
printMake () {
	echo "# Made by 0x223252" > makefile
	echo "# All rigth reserved" >> makefile

printf "include $configFolder/*

# project root folder
ifeq (\$(ROOT_DIR),)
	ROOT_DIR=.
endif
# source folder name
ifeq (\$(SOURCE_DIR),)
	SOURCE_DIR=src
endif
# source folder name
ifeq (\$(BUILD_DIR),)
	BUILD_DIR=build
endif
# exec file name
ifeq (\$(EXEC),)
	EXEC=exec
endif
# debug / release
ifeq (\$(MODE),)
	MODE=debug
endif

ifneq (\$(HARD_ARCH),natif)
	CXX=\$(\$(HARD_ARCH)_CROSS_CXX)
	CC=\$(\$(HARD_ARCH)_CROSS_CC)
	FLAGS+=\$(\$(HARD_ARCH)_FLAGS)
	LDFLAGS+=\$(\$(HARD_ARCH)_LIBS)
	EXEC_AFTER=\$(\$(HARD_ARCH)_EXEC_AFTER)
else
	LDFLAGS+=\$(natif_LIBS)
	FLAGS+=\$(natif_FLAGS)
	EXEC_AFTER=\$(natif_EXEC_AFTER)
endif

ifeq (\$(MODE),release)
	FLAGS+= -D'MODE_RELEASE'
else
	FLAGS+= -D'MODE_DEBUG'
endif

ifeq (\$(LINKAGE),static)
	LDFLAGS+= -static
endif

ifeq (\$(OUT_DLL),dynamic)
	FLAGS+= -fPIC
	LDFLAGS+= -shared -fPIC
endif

ifeq (\$(WARNING),all)
	FLAGS+= -Wall -Wshadow -Wextra -fexceptions
else ifeq (\$(WARNING), none)
	FLAGS+= -w
endif

ifeq (\$(GPROF),on)
	FLAGS+= -pg
	LDFLAGS+= -pg
endif

ifeq (\$(GDB),on)
	FLAGS+= -g
	LDFLAGS+= -g
endif

" >> makefile

inputLength=${#archTest[@]}

for (( i=0; i<${inputLength}; i++ ))
do
	echo "LAST_${archTest[$i]}=null" >> makefile
	echo "LAST_${archTest[$i]}=\$(shell [ -f \".last_config\" ] && cat .last_config | grep ^${archTest[$i]} | cut -d '=' -f2-)" >> makefile
	echo "EQ_${archTest[$i]}=\$(shell [ -f \".last_config\" ] && [ \"\$(${archTest[$i]})\" = \"\$(LAST_${archTest[$i]})\" ] && echo true)" >> makefile
	echo "" >> makefile
	echo "ifneq (\$(EQ_${archTest[$i]}),true)" >> makefile
	echo "	DEPEND=mrproper" >> makefile
	echo "endif" >> makefile
	echo "" >> makefile
done

inputLength=${#dataLibs[@]}

for (( i=0; i<${inputLength}; i++ ))
do
	echo "ifeq (\$(${dataLibs[${i}]}),on)" >> makefile
	echo "	LDFLAGS+= ${dataLibsValues[${i}]}" >> makefile
	echo "endif" >> makefile
	echo "" >> makefile
done

printf "ifeq (\$(FULL_CPP),on)
	CC=\$(CXX)
endif

CPP_SRC=\$(shell find ./\$(SOURCE_DIR) -name *.cpp)
CPP_OBJ=\$(patsubst ./\$(SOURCE_DIR)/%%.cpp,./\$(BUILD_DIR)/\$(HARD_ARCH)/%%.o,\$(CPP_SRC))

C_SRC=\$(shell find ./\$(SOURCE_DIR) -name *.c)
C_OBJ=\$(patsubst ./\$(SOURCE_DIR)/%%.c,./\$(BUILD_DIR)/\$(HARD_ARCH)/%%.o,\$(C_SRC))

OBJ=\$(C_OBJ) \$(CPP_OBJ)
" >> makefile


printf "
CFLAGS+= \$(FLAGS)
CXXFLAGS+= \$(FLAGS)

all: testVar \$(DEPEND) \$(ROOT_DIR)/\$(HARD_ARCH) cible build_dir makedeps \$(ROOT_DIR)/\$(HARD_ARCH)/\$(EXEC) \$(CONFIG) exec_after
	@printf \"+=======================================+\\\\n\"
	@printf \"|      \\\\033[1;92m%%-22s\\\\033[0m           |\\\\n\" \"Buid done\"
	@printf \"| for hard_arch : \\\\033[1;92m%%-22s\\\\033[0m|\\\\n\" \"\$(shell file \$(ROOT_DIR)/\$(HARD_ARCH)/\$(EXEC) | cut -d ',' -f2)\"
	@printf \"| in mode : \\\\033[1;92m%%-22s\\\\033[0m      |\\\\n\" \"\$(MODE)\"
	@printf \"+=======================================+\\\\n\"

testVar:
	@echo \"assert input var, do not remove this else it should be \\\\033[1;31mdangerous\\\\033[0m\"
" >> makefile

inputLength=${#pathType[@]}

for (( i=0; i<${inputLength}; i++ ))
do
	echo "ifeq (\$(${pathType[${i}]}),)" >> makefile
	echo "	@echo \"\\\\033[1;91m${pathType[${i}]}: \$(${pathType[${i}]}) not valide\\\\033[0m\"" >> makefile
	echo "	@exit 1" >> makefile
	echo "endif" >> makefile
	echo "ifeq (\$(${pathType[${i}]}),/)" >> makefile
	echo "	@echo \"\\\\033[1;91m${pathType[${i}]}: \$(${pathType[${i}]}) not valide\\\\033[0m\"" >> makefile
	echo "	@exit 1" >> makefile
	echo "endif" >> makefile
done

printf "	@echo \"\\\\033[1;92mVar tests valides, continue\\\\033[0m\"

\$(ROOT_DIR)/\$(HARD_ARCH):
	@mkdir -p \$(ROOT_DIR)/\$(HARD_ARCH)

exec_after:
	\$(EXEC_AFTER)

cible:
	@echo  > .last_config
" >> makefile

inputLength=${#archTest[@]}

for (( i=0; i<${inputLength}; i++ ))
do
	echo "	@echo \"${archTest[$i]}=\$(${archTest[$i]})\" >> .last_config" >> makefile
done
echo >> makefile

printf "docs:
	@doxywizard doc/Doxyfile

\$(ROOT_DIR)/\$(HARD_ARCH)/\$(EXEC): \$(OBJ)
	\$(CXX) -o \$@ \$^ \$(LDFLAGS)

\$(BUILD_DIR)/\$(HARD_ARCH)/%%.o:./\$(SOURCE_DIR)/%%.c
	\$(CC) -o \$@ -c \$^ \$(CFLAGS)

\$(BUILD_DIR)/\$(HARD_ARCH)/%%.o:./\$(SOURCE_DIR)/%%.cpp
	\$(CXX) -o \$@ -c \$^ \$(CXXFLAGS)

clean: testVar
	rm -f \$(shell find ./\$(SOURCE_DIR)/ -name *.o) \$(shell find ./\$(SOURCE_DIR)/ -name *.so)
	rm -rf ./\$(BUILD_DIR)/\$(HARD_ARCH)

cleanDoc:
	rm -f -r doc/html/*
	rm -f -r doc/latex/*
	rm -f -r doc/xml/*
	rm -f -r doc/man/*
	rm -f -r doc/rtf/*

mrproper: clean cleanDoc
	rm -rf \$(ROOT_DIR)

empty: mrproper
	rm -rf ./\$(BUILD_DIR)
	@echo \"#!/bin/bash\" > script.sh
	@echo \'rm -r \$\$(ls -a | grep -v -E \\\"(^((\.+)|(Configure)|(configure)" >> makefile

inputLength=${#pathType[@]}
for (( i=$saveLast; i<${inputLength}; i++ ))
do
	printf "|(\$(${pathType[$i]}))" >> makefile
done
printf ")\$\$|(^\.git)|(^README)|(^readme))\\\")\' >> script.sh
	
	@cat script.sh | grep rm

	@chmod +x script.sh
	@./script.sh

makedeps:
	@makedepend -Y \$(C_SRC) \$(CPP_SRC) 2> /dev/null

\$(CONFIG):
	@[ ! -f \$(CONFIG) ] && echo > \$(CONFIG)

build_dir:
	mkdir -p ./\$(BUILD_DIR)/\$(HARD_ARCH);
	@for p in \$(shell ls -l -R ./\$(SOURCE_DIR) | grep -E '^\.' | cut -d':' -f1 | cut -d'/' -f3-); do mkdir -p ./\$(BUILD_DIR)/\$(HARD_ARCH)/\$\$p; done

printEnv:
" >> makefile

inputLength=${#archTest[@]}

for (( i=0; i<${inputLength}; i++ ))
do
	echo "	@echo \"LAST_${archTest[$i]}=\$(LAST_${archTest[$i]})\"" >> makefile
	echo "	@echo \"${archTest[$i]}=\$(${archTest[$i]})\"" >> makefile
	echo "	@echo \"EQ_${archTest[$i]}=\\033[1;93m\$(EQ_${archTest[$i]})\\033[0m\"" >> makefile
done
}

[ ! -f makefile ] && printMake && exit

# feed file with KEY=VALUE pair
# $1: array of KEY
# $2: file name
# $3: array of value
feedFile ()
{
	ID=($1)
	configfile=$2
	values=($3)

	if [ ! -f "$configfile" ]; then
		inputLength=${#ID[@]}

		echo "" > $configfile

		for (( i=0; i<${inputLength}; i++ ))
		do
			echo "${ID[$i]}=${values[$i]}" >> $configfile
		done
	fi
}

# function used to draw a check list
# $1: title of the window
# $2: should be set to 'checklist'
# $3: file name where we can get default value of item and where we store result
# $4: if set to --nocancel, cancel button will be desabled, else the string will be used as button label
# $5: array of item label
checkWindow ()
{

	title=$1
	winType=$2
	configfile=$3
	cancel=$4

	input=($5)

	if [ "$winType" != "checklist" ]; then
		return
	fi

	if [ "$cancel" != "--nocancel" ]; then
		cancel="--cancel-label $cancel"
	fi

	values=()

	configfile=$3

	inputLength=${#input[@]}

	PARAMS=""

	for (( i=0; i<${inputLength}; i++ ))
	do
		if [ -f "$configfile" ]; then
			tmp=$(cat $configfile | grep ${input[$i]})
			if [ "$tmp" != "" ]; then
				values[${i}]=$(echo $tmp | cut -d '=' -f2)
			else
				values[${i}]="off"
			fi
		else
			values[${i}]="off"
		fi

		# save params
		PARAMS="$PARAMS $i ${input[$i]} ${values[$i]}"

		# reset all params
		values[${i}]="off"
	done

	$DIALOG $cancel \
		--checklist \
		"$title" \
		$HEIGH \
		$WIDTH \
		$LINES \
		$PARAMS 2> $tmpFile


	retv=$?
	if [ "$retv" == "1" ]; then
		return
	fi
	parameters=$(cat $tmpFile)

	for item in $parameters
	do
		values[${item}]="on"
	done

	echo > $configfile
	for (( i=0; i<${inputLength}; i++ ))
	do
		echo "${input[$i]}=${values[$i]}" >> $configfile
	done
}

# function used to draw a radio list
# $1: title of the window
# $2: should be set to 'radiolist'
# $3: file name where we can get default value of item and where we store result
# $4: if set to --nocancel, cancel button will be desabled, else the string will be used as button label
# $5: KEY of used to store active value
# $6: array of availables value for the KEY
# $7: array of comment for value available
selectWinodw ()
{

	title=$1
	winType=$2
	configfile=$3
	cancel=$4
	ID=$5

	input=($6)
	info=($7)

	if [ "$winType" != "radiolist" ]; then
		return
	fi

	if [ "$cancel" != "--nocancel" ]; then
		cancel="--cancel-label $cancel"
	fi

	values=()
	active=$(cat $configfile | grep $ID | cut -d '=' -f2)

	inputLength=${#input[@]}

	PARAMS=""

	for (( i=0; i<${inputLength}; i++ ))
	do
		if [ "$active" == "${input[$i]}" ]; then
			value[${i}]="on"
		else
			value[${i}]="off"
		fi

		PARAMS="$PARAMS $i ${info[$i]} ${value[$i]}"
	done

	$DIALOG $cancel \
		--radiolist \
		"$title" \
		$HEIGH \
		$WIDTH \
		$LINES \
		$PARAMS 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	if [ "$retv" == "1" ]; then
		return
	fi

	if [ "$ID=${input[$choice]}" != "" ]; then
		echo "$ID=${input[$choice]}" > $configfile
	else
		echo "$ID=${input[0]}" > $configfile
	fi
}

# function used to open editor on sellected file, if file doesn't exit it will be created
# $1: array of KEY (used to create file)
# $2: file name
# $3: array of value
editWindow ()
{
	ID=($1)
	configfile=$2
	values=($3)

	feedFile $ID $configfile $values

	$EDITOR $configfile
}

# tools chaine menu
# libs
# Compilation tools
tools ()
{
	$DIALOG --cancel-label "Back" \
		--menu "Tools chaine" $HEIGH $WIDTH $LINES \
			1 "libs" \
			2 "Compilations tools / libs / flags" 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	if [ "$retv" == "1" ]; then
		return
	fi

	case $choice in
		1) 	checkWindow \
				"debug option" \
				"checklist" \
				"$configFolder/config_tools_libs.mk" \
				"--nocancel" \
				"${dataLibs[*]}"
			tools
			;;
		2) 	editWindow \
				"Tools" \
				"$configFolder/config_tools.mk"
			tools
			;;
	esac
}

# options submenu
# used to select between harch defined in tools chaine menu
options_hard_arch ()
{
	configfile="$configFolder/config_options_hard_arch.mk"
	[ ! -f "$configfile" ] && echo "HARD_ARCH=natif" > $configfile
	active=$(cat $configfile | grep HARD_ARCH | cut -d '=' -f2)

	labelfile="$configFolder/config_tools.mk"
	[ -f "$labelfile" ] && crossTool=($(cat $labelfile | grep LABEL | cut -d '=' -f2))

	natif="off"
	case $active in
		natif)
			natif="on"
			;;
	esac

	inputLength=${#crossTool[@]}

	PARAMS="0 natif $natif"
	for (( i=0; i<${inputLength}; i++ ))
	do
		if [ "$active" == "${crossTool[$i]}" ]; then
			PARAMS="$PARAMS "$(( $i + 1 ))" ${crossTool[$i]} on"
		else
			PARAMS="$PARAMS "$(( $i + 1 ))" ${crossTool[$i]} off"
		fi
	done

	echo $PARAMS

	$DIALOG --cancel-label "Back" \
		--radiolist "choix de la cible de compilation" $HEIGH $WIDTH $LINES \
		$PARAMS 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	if [ "$retv" == "1" ]; then
		return
	fi

	case $choice in
		''|0)	echo "HARD_ARCH=natif" > $configfile
			natif="on"
			;;
		*)	choice=$(( $choice - 1 ))
			echo "HARD_ARCH="${crossTool[$choice]} > $configfile
			natif="off"
			;;
	esac

	if [ "$natif" == "off" ]; then
		configfile="$configFolder/config_tools.mk"
		CROSS_CC=$(cat $configfile | grep ${crossTool[$choice]}_CROSS_CC | cut -d '=' -f2)
		CROSS_CXX=$(cat $configfile | grep ${crossTool[$choice]}_CROSS_CXX | cut -d '=' -f2)

		INSTALL=""

		inputLength=${#compilSoft[@]}
		for (( i=0; i<${inputLength}; i++ ))
		do
			if [ "$CROSS_CC" == "${compilSoft[$i]}" ] || [ "$CROSS_CXX" == "${compilSoft[$i]}" ]; then
				dpkg -s ${compilPacket[$i]} 2> .log 1> /dev/null
				if [ "$(cat .log)" != "" ]; then
					printf "\e[1;33m${compilSoft[$i]}\e[0m] is missing, you need it to continue.\n"
					echo "would you want to install it ? (Y/n)"
					read INSTALL_TOOL
					if [ "$INSTALL_TOOL" != "n" ] && [ "$INSTALL_TOOL" != "N" ]; then
						INSTALL+=" ${compilPacket[$i]}"
					fi
				fi
				rm .log
			fi
		done

		if [ "$CROSS_CXX" == "arm-none-eabi-gcc" ] ||
			[ "$CROSS_CXX" == "arm-none-eabi-g++" ]; then
			arm-none-eabi-gcc -v 2> /dev/null | grep "gcc version" > .log 
			if [ "$(cat .log)" == "" ]; then
				echo "gcc/g++-arm is missing, you need it to continue."
				echo "would you want to install it ? (Y/n)"
				read INSTALL_GCC_ARM

				if [ "$INSTALL_GCC_ARM" == "n" ] && [ "$INSTALL_GCC_ARM" == "N" ]; then
					return;
				fi

				read -p "Set directory to place arm none tool chaine: " -e DIRECTORY

				DIRECTORY=$(eval echo $DIRECTORY)

				if [ -f "$DIRECTORY" ]; then
					printf "\e[1;31m It's a file\e[0m"
					sleep 1
					return
				elif [ ! -d "$DIRECTORY" ]; then
					mkdir -v -p $DIRECTORY
					sleep 1
				fi

				ls $DIRECTORY/gcc-arm-none-eabi-7-2018-q2-update > .log 2> /dev/null

				if [ "$(cat .log)" == "" ]; then
					wget "https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2"

					printf "extract \e[1;33mgcc-arm-none-eabi-7-2018-q2-update\e[0m to \e[1;33m$DIRECTORY\e[0m\n"
					tar -xf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2 -C $DIRECTORY

					echo "remove gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2"
					rm gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2*
				fi

				echo "add arm-gcc to path ? (y/N)"
				read INSTALL_GCC_ARM

				PRINT_AT_END=$PRINT_AT_END"To \e[32mfinish\e[0m install, run the following cmds:\n"
				if [ "$INSTALL_GCC_ARM" == "y" ] || [ "$INSTALL_GCC_ARM" == "Y" ]; then
					[ "$( cat ~/.bashrc | grep gcc-arm-none-eabi-7-2018-q2-update )" == "" ] && \
						echo PATH=\$PATH:$DIRECTORY/gcc-arm-none-eabi-7-2018-q2-update/bin >> ~/.bashrc && \
						echo export PATH >> ~/.bashrc
					PRINT_AT_END=$PRINT_AT_END" source ~/.bashrc\n"
				else
					PRINT_AT_END=$PRINT_AT_END" PATH=\$PATH:\$pwd/$DIRECTORY/gcc-arm-none-eabi-7-2018-q2-update/bin\n"
				fi
				PRINT_AT_END=$PRINT_AT_END"\n"
			fi
			rm .log
		fi

		if [ "$INSTALL" != "" ]; then
			echo "sudo apt-get install $INSTALL"
			sudo apt-get install $INSTALL
		fi
	fi
}

# options submenu
# not used now
options_patch ()
{
	configfile="$configFolder/config_options_patch.mk"
	[ ! -f "$configfile" ] && echo "PATCH=" > $configfile
	active=$(cat $configfile | grep PATCH | cut -d '=' -f2)

	incremental="off"
	differentiel="off"
	decremental="off"
	case $active in
		incremental)
			incremental="on"
			;;
		differentiel)
			differentiel="on"
			;;
		decremental)
			decremental="on"
			;;
	esac
	$DIALOG --cancel-label "Back" \
		--radiolist "type d'optimisation" $HEIGH $WIDTH $LINES \
		1 "incremental" $incremental\
		2 "differentiel" $differentiel\
		3 "decremental" $decremental 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	if [ "$retv" == "1" ]; then
		return
	fi

	case $choice in
		1)	echo "PATCH=incremental" > $configfile
			;;
		2)	echo "PATCH=differentiel" > $configfile
			;;
		3)	echo "PATCH=decremental" > $configfile
			;;
		*)	echo "PATCH=" > $configfile
			;;
	esac
}

# options menu, used to change compilations options debug lvl / optiomisations / ...
# Options de compilation
# Hardware arch
# Warnning
# Optimisation
# Linkage
# Debug
# out
options ()
{
	hard_arch=''
	warning=''
	optimisation=''
	[ -f "$configFolder/config_options_hard_arch.mk" ] &&  hard_arch=$(cat "$configFolder/config_options_hard_arch.mk" | grep HARD_ARCH | cut -d '=' -f2)
	[ -f "$configFolder/config_options_warning.mk" ] &&  warning=$(cat "$configFolder/config_options_warning.mk" | grep WARNING | cut -d '=' -f2)
	[ -f "$configFolder/config_options_optimisation.mk" ] &&  optimisation=$(cat "$configFolder/config_options_optimisation.mk" | grep OPTIMISATION | cut -d '=' -f2)
	[ -f "$configFolder/config_options_linkage.mk" ] &&  linkage=$(cat "$configFolder/config_options_linkage.mk" | grep LINKAGE | cut -d '=' -f2)
	[ -f "$configFolder/config_options_outType.mk" ] &&  out=$(cat "$configFolder/config_options_outType.mk" | grep OUT_DLL | cut -d '=' -f2)

	$DIALOG --cancel-label "Back" \
		--menu "Options de compilation" $HEIGH $WIDTH $LINES \
			1 "Hardware arch : "$hard_arch \
			2 "Warnning : "$warning \
			3 "Optimisation : "$optimisation \
			4 "Linkage : "$linkage \
			5 "Debug" \
			6 "out : "$out 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	if [ "$retv" == "1" ]; then
		return
	fi

	case $choice in
		1) 	options_hard_arch
			options
			;;
		2) # warning
			selectWinodw \
				"niveau de warnings" \
				"radiolist" \
				"$configFolder/config_options_warning.mk" \
				"Back" \
				"WARNING" \
				"${warningType[*]}" \
				"${warningInfos[*]}"
			options
			;;
		3) # optimisation
			selectWinodw \
				"type d'optimisation" \
				"radiolist" \
				"$configFolder/config_options_optimisation.mk" \
				"Back" \
				"OPTIMISATION" \
				"${optimisationType[*]}" \
				"${optimisationInfo[*]}"
			options
			;;
		4) # linkage
			selectWinodw \
				"type de linkage" \
				"radiolist" \
				"$configFolder/config_options_linkage.mk" \
				"Back" \
				"LINKAGE" \
				"${linkageType[*]}" \
				"${linkageType[*]}"
			options
			;;
		5) # debug
			checkWindow \
				"debug option" \
				"checklist" \
				"$configFolder/config_options_debug.mk" \
				"Back" \
				"${debugTypes[*]}"
			options
			;;
		6) # binaire
			selectWinodw \
				"type de binaire produit" \
				"radiolist" \
				"$configFolder/config_options_outType.mk" \
				"Back" \
				"OUT_DLL" \
				"${outType[*]}" \
				"${outInfos[*]}"
			options
			;;
	esac
}

# mode menu
# prvide macro who define MODE as RELEASE or DEBUG, 
# usable to activate or deactivate code
mode ()
{
	configfile="$configFolder/config_mode.mk"
	[ ! -f "$configfile" ] && echo "MODE=debug" > $configfile
	mode=$(cat $configfile | grep MODE | cut -d '=' -f2)

	debug="off"
	release="off"
	case $mode in
		debug)
			debug="on"
			;;
		release)
			release="on"
			;;
	esac
	$DIALOG --cancel-label "Back" \
		--radiolist "mode de sortie" 20 61 5 \
		1 "compilé sans aucun log de debug" $release\
		2 "compilé avec les logs de debug affichable" $debug 2> $tmpFile

	retv=$?
	choice=$(cat $tmpFile)

	if [ "$retv" == "1" ]; then
		return
	fi

	case $choice in
		1)	echo "MODE=release" > $configfile
			;;
		2)	echo "MODE=debug" > $configfile
			;;
	esac
}

# not used
patch ()
{
	sleep 1
}

main ()
{
	$DIALOG --cancel-label "Exit" \
		--title "$1" \
		--menu "Compilation Configuration" $HEIGH $WIDTH $LINES \
			1 "Tool chaine" \
			2 "Options" \
			3 "Path" \
			4 "Mode" \
			6 "Git libs" \
			7 "Init main.c" \
			8 "Build" \
			9 "About/help" 2> $tmpFile
			# 5 "Patch" \

	retv=$?
	choice=$(cat $tmpFile)

	if [ $retv -eq 1 -o $retv -eq 255 ]; then
		rm $tmpFile
		clear
		printf "$PRINT_AT_END"
		exit
	fi

	case $choice in
		1)
			tools
			main
			;;
		2)
			options
			main
			;;
		3)
			editWindow \
				"${pathType[*]}" \
				"$configFolder/config_path.mk" \
				"${pathValue[*]}"
			main
			;;
		4)
			selectWinodw \
				"mode de sortie" \
				"radiolist" \
				"$configFolder/config_mode.mk" \
				"Back" \
				"MODE" \
				"${modeType[*]}" \
				"${modeInfos[*]}"
			main
			;;
		5)
			patch
			main
			;;
		6)
			clear
			for (( i=0; i < $MAX_Y / 2; i++ ))
			do
				echo "";
			done

			read -p "git repos owner name ? " gitUser
			read -p "where git repos should be cloned ? " gitSrc
			./$0_getGit -u $gitUser -s $gitSrc
			main
			;;
		7)
			clear
			for (( i=0; i < $MAX_Y / 2; i++ ))
			do
				echo "";
			done

			SRC=$( cat $configFolder/config_path.mk | grep SOURCE_DIR | cut -d'=' -f2 )

			isMain=$( grep -r  -E "( m|^m)ai(n$|n |n\()" $SRC | grep -E "^$SRC/[^:]*\.c(pp)?:" | cut -d':' -f1 | rev | cut -d'/' -f1 | rev )
			if [ "$isMain" != "" ]; then
				printf "\e[1;31mmain\e[0m function already defined in \e[1;33m$isMain\e[0m, do you want to removed it [yes/No] ?\n"
				read rep
				if [ "$rep" == "yes" ] || [ "$rep" == "YES" ]; then
					rm $(find $SRC | grep -E "${isMain}$" )
					$0_initMain $configFolder
					printf "${SRC}/\e[1;32mmain.c\e[0m created\n"
					sleep 2
				fi
			else
				$0_initMain $configFolder
				printf "\e[1;32m${SRC}/main.c\e[0m created\n"
				sleep 2
			fi
			main
			;;
		8)
			clear
			echo "update makefile [Y/n] ?"
			read scan

			if [ "$scan" != "n" ] || [ "$scan" != "N" ]; then
				rm makefile
				printMake
			fi

			make
			echo "press [Enter] to continue"
			read scan
			main
			;;
		9)
			helpWindow
			main
			;;
	esac
}

helpWindow()
{
$DIALOG --msgbox \
"  Hello, i'm glad to know you use it. This script is a
 Makefile generator and configurator, I created it for
 my personal use, but if you want to use it or improve
 it, feel free to do it.

Software made by ox223252
License $LICENSE:
  Get sources on Github:
  $GITHUB_PATH
Version $VERSION" $HEIGH $WIDTH
}

if [ $# != 0 ]; then
	for PARAM in $@; do
		case $PARAM in
			-h|--help)
				helpWindow
				exit
				;;
			-x)
				# change display between term an X display
				DIALOG=Xdialog
				;;
			-i|--init-main)
				INIT_MAIN=true
				./$0_initMain $configFolder
				exit
				;;
		esac
	done
fi

main
